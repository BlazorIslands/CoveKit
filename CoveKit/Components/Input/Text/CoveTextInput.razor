@namespace CoveKit

@implements ICoveKitComponent
@implements IAdjustableWidth
@implements IShadowable
@implements IBorderable
@implements IRoundable
@implements ILabelable

<div class="p-2 ck-input-wrapper"
     style="@(SetWidth(Width))">

     <div class="ck-input-header">
        @if (!string.IsNullOrEmpty(Label))
        {
            <div class="ck-input-label">@Label.ToUpper()</div>
        }

        @if (ShowCounter)
        {
            <div class="ck-input-text-counter @(Count >= MaxLength ? "max-length-reached" : string.Empty)">@(Value?.Length ?? 0) / @MaxLength</div>
        }
     </div>

    <input type="text"
           value="@Value"
           maxlength="@MaxLength"
           placeholder="@(Placeholder ?? string.Empty)"
           @attributes="AdditionalAttributes"
           @oninput="OnInputChanged"
           class="p-2 m-2 ck-font @Class @(Border ? "ck-border" : "ck-no-border") @(Round ? "ck-input-round" : string.Empty) @(Shadow ? "ck-shadow" : string.Empty)"
           style="@Style @(SetShadowColor(Shadow, ShadowColor)) @(SetBorderColor(Border, BorderColor))" />
</div>

@code {
    /// <summary>
    /// Gets or sets the CSS class for the input element.
    /// </summary>
    [Parameter] public string? Class  { get; set; }

    /// <summary>
    /// Gets or sets the inline CSS styles for the input element.
    /// </summary>
    [Parameter] public string? Style  { get; set; }

    /// <summary>
    /// Gets or sets the width of the input element.
    /// </summary>
    [Parameter] public int Width { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the input element has a shadow.
    /// </summary>
    [Parameter] public bool Shadow { get; set; }

    /// <summary>
    /// Gets or sets the color of the shadow for the input element.
    /// </summary>
    [Parameter] public object ShadowColor { get; set; }

    /// <summary>
    /// Gets or sets the maximum length of the input value.
    /// </summary>
    [Parameter] public int MaxLength { get; set; } = int.MaxValue;

    /// <summary>
    /// Gets or sets the placeholder text for the input element.
    /// </summary>
    [Parameter] public string? Placeholder  { get; set; }

    /// <summary>
    /// Gets or sets the value of the input element.
    /// </summary>
    [Parameter] public string? Value  { get; set; }

    /// <summary>
    /// Gets or sets the event callback for when the value of the input element changes.
    /// </summary>
    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the input element has a round shape.
    /// </summary>
    [Parameter] public bool Round { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the input element has an outline.
    /// </summary>
    [Parameter] public bool Border { get; set; }

    [Parameter]
    public object BorderColor { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public bool ShowCounter { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

    public int Count => Value?.Length ?? 0;

    /// <summary>
    /// Sets the width of the input element based on the specified percentage.
    /// </summary>
    /// <param name="width">The width percentage.</param>
    /// <returns>The CSS style for setting the width.</returns>
    public string SetWidth(int width) 
    { 
        return width > 0 ? $"width: {width}%;" : string.Empty; 
    }

    /// <summary>
    /// Sets the shadow color for the input element based on the specified shadow and color.
    /// </summary>
    /// <param name="shadow">A value indicating whether the input element has a shadow.</param>
    /// <param name="shadowColor">The color of the shadow.</param>
    /// <returns>The CSS style for setting the shadow color.</returns>
    public string SetShadowColor(bool shadow, object shadowColor) 
    {   
        if (shadowColor is CoveColor color)
        {
            return shadow ? $"box-shadow: 7px 7px 0 0 {CoveColorHelper.GetColorRgba(color)};" : string.Empty;
        }

        if (shadowColor is CustomCoveColor customColor)
        {
            return shadow ? $"box-shadow: 7px 7px 0 0 {customColor};" : string.Empty;
        }

        return string.Empty;
    }

    public string SetBorderColor(bool border, object borderColor) 
    {
        if (borderColor is CoveColor color)
        {
            return border ? $"border-color: {CoveColorHelper.GetColorRgba(color)};" : string.Empty;
        }

        if (borderColor is CustomCoveColor customColor)
        {
            return border ? $"border-color: {customColor};" : string.Empty;
        }
        
        return string.Empty;
    }

    /// <summary>
    /// Handles the value changed event of the input element.
    /// </summary>
    /// <param name="e">The event arguments.</param>
    private void OnInputChanged(ChangeEventArgs e)
    {
        Value = e.Value.ToString();
        ValueChanged.InvokeAsync(Value);
    }
}
