@namespace CoveKit

@typeparam TValue

@implements ICoveKitComponent
@implements IAdjustableWidth
@implements IShadowable
@implements IBorderable
@implements IRoundable
@implements ILabelable

<div class="ck-input-wrapper"
     style="@(SetWidth(Width))">
    @if (!string.IsNullOrEmpty(Label))
    {
        <div class="ck-input-label">@Label</div>
    }

    <input type="number"
           value="@Value"
           @onchange="OnValueChanged"
           @attributes="AdditionalAttributes"
           placeholder="@(Placeholder ?? string.Empty)"
           disabled="@Disabled"
           max="@MaxValue?.ToString()"
           min="@MinValue?.ToString()"
           step="@(Step?.ToString() ?? "1")"
           class="p-2 m-2 ck-font @Class @(Border ? "ck-border" : "ck-no-border") @(Round ? "ck-input-round" : string.Empty) @(Shadow ? "ck-shadow" : string.Empty)"
           style="@Style @(SetShadowColor(Shadow, ShadowColor)) @(SetBorderColor(Border, BorderColor))" />
</div>


@code {
    /// <summary>
    /// Gets or sets the CSS class for the component.
    /// </summary>
    [Parameter] public string? Class { get; set; }

    /// <summary>
    /// Gets or sets the inline style for the component.
    /// </summary>
    [Parameter] public string? Style { get; set; }

    /// <summary>
    /// Gets or sets the value of the input.
    /// </summary>
    [Parameter] public TValue? Value { get; set; }

    /// <summary>
    /// Gets or sets the callback for when the value of the input changes.
    /// </summary>
    [Parameter] public EventCallback<TValue?> ValueChanged { get; set; }

    /// <summary>
    /// Gets or sets the placeholder text for the input.
    /// </summary>
    [Parameter] public string? Placeholder { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the input is disabled.
    /// </summary>
    [Parameter] public bool Disabled { get; set; }

    /// <summary>
    /// Gets or sets the maximum value for the input.
    /// </summary>
    [Parameter] public TValue? MaxValue { get; set; }

    /// <summary>
    /// Gets or sets the minimum value for the input.
    /// </summary>
    [Parameter] public TValue? MinValue { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the input has an outline.
    /// </summary>
    [Parameter] public bool Border { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the input has a round shape.
    /// </summary>
    [Parameter] public bool Round { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the input has a shadow.
    /// </summary>
    [Parameter] public bool Shadow { get; set; }

    /// <summary>
    /// Gets or sets the color of the shadow for the input.
    /// </summary>
    [Parameter] public CoveColor ShadowColor { get; set; }

    /// <summary>
    /// Gets or sets the width of the input in percentage.
    /// </summary>
    [Parameter] public int Width { get; set; }

    /// <summary>
    /// Gets or sets the step value for the input.
    /// </summary>
    [Parameter] public TValue? Step { get; set; }

    [Parameter]
    public CoveColor BorderColor { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

    /// <summary>
    /// Sets the width of the input based on the specified percentage.
    /// </summary>
    /// <param name="width">The width of the input in percentage.</param>
    /// <returns>The CSS style for setting the width of the input.</returns>
    public string SetWidth(int width)
    {
        return width > 0 ? $"width: {width}%;" : string.Empty;
    }

    /// <summary>
    /// Sets the shadow color for the input based on the specified parameters.
    /// </summary>
    /// <param name="shadow">A value indicating whether the input has a shadow.</param>
    /// <param name="shadowColor">The color of the shadow for the input.</param>
    /// <returns>The CSS style for setting the shadow color of the input.</returns>
    public string SetShadowColor(bool shadow, CoveColor shadowColor) => shadow ? $"box-shadow: 7px 7px 0 0 {shadowColor};" : string.Empty;

    public string SetBorderColor(bool border, CoveColor borderColor) => border ? $"border-color: {borderColor};" : string.Empty;

    /// <summary>
    /// Handles the change event when the value of the input changes.
    /// </summary>
    /// <param name="e">The event arguments.</param>
    private void OnValueChanged(ChangeEventArgs e)
    {
        if (e?.Value is string input && TryParseValue(input, out TValue value))
        {
            Value = value;
            ValueChanged.InvokeAsync(value);
        }
    }

    /// <summary>
    /// Tries to parse the input value and convert it to the specified type.
    /// </summary>
    /// <param name="input">The input value to parse.</param>
    /// <param name="result">The parsed value.</param>
    /// <returns><c>true</c> if the input value was successfully parsed; otherwise, <c>false</c>.</returns>
    private bool TryParseValue(string input, out TValue result)
    {
        result = default;

        if (typeof(TValue) == typeof(double) && double.TryParse(input, out var doubleValue))
        {
            result = (TValue)(object)doubleValue;
            return true;
        }
        if (typeof(TValue) == typeof(float) && float.TryParse(input, out var floatValue))
        {
            result = (TValue)(object)floatValue;
            return true;
        }
        if (typeof(TValue) == typeof(decimal) && decimal.TryParse(input, out var decimalValue))
        {
            result = (TValue)(object)decimalValue;
            return true;
        }

        return false;  // Invalid input
    }
}
