@namespace CoveKit

@typeparam TValue

@implements ICoveKitComponent
@implements IAdjustableWidth
@implements IShadowable

<input type="number"
       value="@Value"
       @onchange="OnValueChanged"
       placeholder="@(Placeholder ?? string.Empty)"
       disabled="@Disabled"
       max="@MaxValue?.ToString()"
       min="@MinValue?.ToString()"
       step="@(Step?.ToString() ?? "1")"
       class="@Class @(Outline ? "ck-outline" : "ck-no-outline") @(Round ? "ck-round" : string.Empty) @(Shadow ? "ck-shadow" : string.Empty)"
       style="@Style @(SetWidth(Width)) @(SetShadowColor(Shadow, ShadowColor))" />

@code {
    [Parameter] public string? Class { get; set; }
    [Parameter] public string? Style { get; set; }
    [Parameter] public TValue? Value { get; set; }
    [Parameter] public EventCallback<TValue?> ValueChanged { get; set; }
    [Parameter] public string? Placeholder { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public TValue? MaxValue { get; set; }
    [Parameter] public TValue? MinValue { get; set; }
    [Parameter] public bool Outline { get; set; }
    [Parameter] public bool Round { get; set; }
    [Parameter] public bool Shadow { get; set; }
    [Parameter] public string ShadowColor { get; set; } = "rgba(0, 0, 0, 0.1)";
    [Parameter] public int Width { get; set; }
    [Parameter] public TValue? Step { get; set; }

    public string SetWidth(int width)
    {
        return width > 0 ? $"width: {width}%;" : string.Empty;
    }

    public string SetShadowColor(bool shadow, string shadowColor) => shadow ? $"box-shadow: 4px 4px 0 0 {shadowColor};" : string.Empty;

    private void OnValueChanged(ChangeEventArgs e)
    {
        if (e?.Value is string input && TryParseValue(input, out TValue value))
        {
            Value = value;
            ValueChanged.InvokeAsync(value);
        }
    }

    private bool TryParseValue(string input, out TValue result)
    {
        result = default;

        if (typeof(TValue) == typeof(double) && double.TryParse(input, out var doubleValue))
        {
            result = (TValue)(object)doubleValue;
            return true;
        }
        if (typeof(TValue) == typeof(float) && float.TryParse(input, out var floatValue))
        {
            result = (TValue)(object)floatValue;
            return true;
        }
        if (typeof(TValue) == typeof(decimal) && decimal.TryParse(input, out var decimalValue))
        {
            result = (TValue)(object)decimalValue;
            return true;
        }

        return false;  // Invalid input
    }
}
