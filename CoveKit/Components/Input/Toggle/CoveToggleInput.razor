@namespace CoveKit

@implements ICoveKitComponent
@implements IShadowable

<label class="@(Shadow ? "ck-toggle-input-switch-shadow" : "ck-toggle-input-switch") @(Round ? "" : string.Empty) @(Shadow ? "ck-shadow" : string.Empty) @(Border ? "ck-border" : string.Empty) @Class"
       style="@(SetShadowColor(Shadow, ShadowColor)) --switch-color-on: @(SetSwitchColor(SwitchColor)); --slider-color: @(SetSliderColor(SliderColor)); --slider-color-on: @(SetSliderColor(SliderColor)); @Style">
    <input type="checkbox"
           class="ck-toggle-input-checkbox">
    <span class="@(Shadow ? "ck-toggle-input-slider-shadow" : "ck-toggle-input-slider") @(Round ? "" : string.Empty)"></span>
</label>

@code {
    [Parameter] public string? Class { get; set; }
    [Parameter] public string? Style { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> AdditionalAttributes { get; set; }
    [Parameter] public bool Round { get; set; }
    [Parameter] public bool Shadow { get; set; }
    [Parameter] public object ShadowColor { get; set; }
    [Parameter] public bool Border { get; set; }
    [Parameter] public object BorderColor { get; set; }
    [Parameter] public object SwitchColor { get; set; } = CoveColor.Ash;
    [Parameter] public object SliderColor { get; set; } = CoveColor.MutedBlue;
    [Parameter] public bool Value { get; set; }

    public string SetShadowColor(bool shadow, object shadowColor) 
    {   
        if (shadowColor is CoveColor color)
        {
            return shadow ? $"box-shadow: 4px 4px 0 0 {CoveColorHelper.GetColorRgba(color)};" : string.Empty;
        }

        if (shadowColor is CustomCoveColor customColor)
        {
            return shadow ? $"box-shadow: 4px 4px 0 0 {customColor};" : string.Empty;
        }

        return string.Empty;
    }

    public string SetBorderColor(bool border, object borderColor) 
    {
        if (borderColor is CoveColor color)
        {
            return border ? $"border-color: {CoveColorHelper.GetColorRgba(color)};" : string.Empty;
        }

        if (borderColor is CustomCoveColor customColor)
        {
            return border ? $"border-color: {customColor};" : string.Empty;
        }
        
        return string.Empty;
    }

    public string SetSwitchColor(object switchColor) 
    {
        if (switchColor is CoveColor color) 
        {
            return $"{CoveColorHelper.GetColorRgba(color)}";
        }

        if (switchColor is CustomCoveColor customColor) 
        {
            return $"{customColor}";
        }

        return string.Empty;
    }

    public string SetSliderColor(object sliderColor) 
    {
        if (sliderColor is CoveColor color) 
        {
            return $"{CoveColorHelper.GetColorRgba(color)}";
        }

        if (sliderColor is CustomCoveColor customColor) 
        {
            return $"{customColor}";
        }

        return string.Empty;
    }
}