@namespace CoveKit

@implements ICoveKitComponent
@implements IBorderable
@implements IShadowable
@implements IBackgroundColorable
@implements IRoundable

<button type="@CoveButtonTypeHelper.GetButtonType(Type)"
        @attributes="AdditionalAttributes"
        @onclick="OnClick"
        class="ck-font ck-button @Class @(Round ? "ck-button-round" : string.Empty) @(Border ? "ck-border" : "ck-no-border") @(Shadow ? "ck-shadow" : string.Empty)"
        style="@Style @(SetShadowColor(Shadow, ShadowColor)) @SetBorderColor(Border, BorderColor) @(SetBackgroundColor(BackgroundColor)) @(SetTextColor(TextColor))">
    @(Text ?? string.Empty)
</button>

@code {
    [Parameter] public string? Class { get; set; }
    [Parameter] public string? Style { get; set; }
    [Parameter] public bool Round { get; set; }
    [Parameter] public bool Border { get; set; }
    [Parameter] public object BorderColor { get; set; }
    [Parameter] public bool Shadow { get; set; }
    [Parameter] public object ShadowColor { get; set; }
    [Parameter] public object BackgroundColor { get; set; }
    [Parameter] public object TextColor { get; set; }
    [Parameter] public string? Text { get; set; }
    [Parameter] public CoveButtonType Type { get; set; }
    [Parameter] public EventCallback OnClick { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> AdditionalAttributes { get; set; }

    public string SetShadowColor(bool shadow, object shadowColor)
    {
        if (shadowColor is CoveColor color)
        {
            return shadow ? $"box-shadow: 7px 7px 0 0 {CoveColorHelper.GetColorRgba(color)};" : string.Empty;
        }

        if (shadowColor is CustomCoveColor customColor)
        {
            return shadow ? $"box-shadow: 7px 7px 0 0 {customColor};" : string.Empty;
        }

        return string.Empty;
    }

    public string SetBorderColor(bool border, object borderColor)
    {
        if (borderColor is CoveColor color)
        {
            return border ? $"border-color: {CoveColorHelper.GetColorRgba(color)};" : string.Empty;
        }

        if (borderColor is CustomCoveColor customColor)
        {
            return border ? $"border-color: {customColor};" : string.Empty;
        }

        return string.Empty;
    }

    public string SetBackgroundColor(object backgroundColor)
    {
        if (backgroundColor is CoveColor color)
        {
            return $"background-color: {CoveColorHelper.GetColorRgba(color)};";
        }

        if (backgroundColor is CustomCoveColor customColor)
        {
            return $"background-color: {customColor};";
        }

        return string.Empty;
    }

    public string SetTextColor(object textColor)
    {
        if (textColor is CoveColor color)
        {
            return $"color: {CoveColorHelper.GetColorRgba(color)};";
        }

        if (textColor is CustomCoveColor customColor)
        {
            return $"color: {customColor};";
        }

        return string.Empty;
    }
}
